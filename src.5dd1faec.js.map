{"version":3,"sources":["index.js"],"names":["pageBackground","document","querySelector","startButton","stopButton","addEventListener","getStartButtonnWork","stopChangeBgColor","intervalId","startButtonIsActive","getRandomHexColor","Math","floor","random","toString","setInterval","changeBgColor","setAttribute","bgColor","style","backgroundColor","removeAttribute","clearInterval","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","reject","map","user","result","updatedUsers","table"],"mappings":";;;AAmFA,aAnFA,QAAA,oBAGI,MAAMA,EAAgBC,SAASC,cAAc,QACvCC,EAAcF,SAASC,cAAc,gBACrCE,EAAaH,SAASC,cAAc,eAE9CC,EAAYE,iBAAiB,QAASC,GACtCF,EAAWC,iBAAiB,QAASE,GAErC,IAAIC,EAAa,KACbC,GAAsB,EAE1B,SAASC,IACC,UAAGC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAG3D,SAASR,IACRE,EAAaO,YAAYC,EAAe,KAIzC,SAASA,IACLb,EAAYc,aAAa,YAAY,GACjCC,IAAAA,EAAUR,IACdV,EAAemB,MAAMC,gBAAkBF,EAK3C,SAASX,IACLJ,EAAYkB,gBAAgB,YAC5BC,cAAcd,GAUlB,MAAMe,EAAQC,GACH,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAILI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,IACxB,IAAIb,QAAQ,CAACC,EAASa,KAIzBb,EAHqBW,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,MAMnEC,EAAUC,GAAgBb,QAAQc,MAAMD,GAQ9CP,EAAgBH,EAAO,SAASD,KAAKF,QAAQc,OAC7CR,EAAgBH,EAAO,QAAQD,KAAKF,QAAQc","file":"src.5dd1faec.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n//Color switcher\n    const pageBackground= document.querySelector('body')\n    const startButton = document.querySelector('[data-start]')\n    const stopButton = document.querySelector('[data-stop]')\n\nstartButton.addEventListener('click', getStartButtonnWork);\nstopButton.addEventListener('click', stopChangeBgColor)\n\nlet intervalId = null;\nlet startButtonIsActive = false;\n\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nfunction getStartButtonnWork() {\n intervalId = setInterval(changeBgColor, 1000);\n}\n\n\nfunction changeBgColor() {\n    startButton.setAttribute('disabled', true);\n    let bgColor = getRandomHexColor();\n    pageBackground.style.backgroundColor = bgColor;\n     \n          \n}\n\nfunction stopChangeBgColor() {\n    startButton.removeAttribute('disabled');\n    clearInterval(intervalId);\n\n}\n\n\n\n\n\n//delay function\n\nconst delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n\n//toggleUserState function\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username,) => {\n    return new Promise((resolve, reject) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === username ? { ...user, active: !user.active } : user\n        );\n        resolve(updatedUsers);\n    });\n  \n};\nconst result =  updatedUsers => console.table(updatedUsers);\n\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Poly').then(console.table);\n"]}