{"version":3,"sources":["js-files/color-switcher.js","js-files/timer.js","js-files/delay-fn.js","js-files/user-state-fn.js","js-files/transaction.js","index.js"],"names":["pageBackground","document","querySelector","startButton","stopButton","addEventListener","getStartButtonnWork","stopChangeBgColor","intervalId","startButtonIsActive","getRandomHexColor","Math","floor","random","toString","setInterval","changeBgColor","setAttribute","bgColor","style","backgroundColor","removeAttribute","clearInterval","refs","inputData","getElementById","timerContainer","dataField","dataDays","dataHours","dataMinutes","dataSeconds","Timer","constructor","onTick","intervalID","isActive","start","enteredDate","ms","Date","value","getTime","time","convertMs","pad","String","padStart","days","hour","hours","minute","minutes","second","seconds","timer","changeTimerNumbers","textContent","bind","delay","Promise","resolve","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","username","reject","map","user","result","updatedUsers","table","randomIntegerFromInterval","min","max","makeTransaction","transaction","id","canProcess","output","Error","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.0890a121.js","sourceRoot":"../src","sourcesContent":["//Color switcher\n    const pageBackground= document.querySelector('body')\n    const startButton = document.querySelector('[data-start]')\n    const stopButton = document.querySelector('[data-stop]')\n\nstartButton.addEventListener('click', getStartButtonnWork);\nstopButton.addEventListener('click', stopChangeBgColor)\n\nlet intervalId = null;\nlet startButtonIsActive = false;\n\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nfunction getStartButtonnWork() {\n intervalId = setInterval(changeBgColor, 1000);\n}\n\n\nfunction changeBgColor() {\n    startButton.setAttribute('disabled', true);\n    let bgColor = getRandomHexColor();\n    pageBackground.style.backgroundColor = bgColor;\n     \n          \n}\n\nfunction stopChangeBgColor() {\n    startButton.removeAttribute('disabled');\n    clearInterval(intervalId);\n\n}","// Напиши скрипт таймера, который ведёт обратный отсчет до определенной даты.\n\n// Если пользователь выбрал дату в прошлом, необходимо показать уведомление \"Please choose a date in the future\".\n// Используй библиотеку sweetalert2.\n// Кнопка должа быть не активна до тех пор, пока пользователь не выбрал дату в будущем.\n// Если выбрана валидная дата и пользователь нажал кнопку - начинается отсчет времени.\n// Скрипт должен вычислять раз в секунду сколько времени осталось до указанной даты и обновлять интерфейс, \n// показывая четыре цифры: дни, часы, минуты и секунды в формате xx: xx: xx: xx.\n\n// Количество дней может состоять из более чем двух цифр.\n// Таймер должен останавливаться когда дошел до конечной даты, то есть 00:00:00:00.\n// Для подсчета значений используй готовую функцию, где ms - разница между конечной и текущей датой в миллисекундах.\n\nconst refs = {\n    inputData: document.getElementById('date-selector'),\n    startButton: document.querySelector('.timer-button'),\n    timerContainer: document.querySelector('.timer'),\n    dataField: document.querySelector('.field'),\n    dataDays: document.querySelector('[data-days]'),\n    dataHours: document.querySelector('[data-hours]'),\n    dataMinutes: document.querySelector('[data-minutes]'),\n    dataSeconds: document.querySelector('[data-seconds]'),\n  \n}\n\n\n\n\nclass Timer  {\n    constructor({ onTick }){\n        this.intervalID = null,\n            this.isActive = false,\n            this.onTick = onTick;\n    }\n\n    start() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n\n        this.intervalID = setInterval(() => {\n            const enteredDate = new Date(document.getElementById('date-selector').value);\n            const inputDate = enteredDate.getTime();\n            const currentDate = new Date();\n\n\n            const ms = inputDate - currentDate;\n            const time = this.convertMs(ms);\n\n            this.onTick(time);\n\n        }, 1000);\n\n    }\n\n     pad(value){\n        return String(value).padStart(2, '0');\n    }\n\n     convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n}\n\n\nconst timer = new Timer({\n    onTick: changeTimerNumbers,\n});\n\nfunction changeTimerNumbers({ days, hours, minutes, seconds }) {\n    refs.dataDays.textContent = `${days}`;\n    refs.dataHours.textContent = `${hours}`;\n    refs.dataMinutes.textContent = `${minutes}`;\n    refs.dataSeconds.textContent = `${seconds}`;\n}\n \n refs.startButton.addEventListener('click', timer.start.bind(timer));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function getUserInputTime() {\n//    const enteredDate = document.getElementById('date-selector').value;\n//     return enteredDate;\n//     console.log(enteredDate); \n// }","//delay function\n\nconst delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n","//toggleUserState function\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username,) => {\n    return new Promise((resolve, reject) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === username ? { ...user, active: !user.active } : user\n        );\n        resolve(updatedUsers);\n    });\n  \n};\nconst result =  updatedUsers => console.table(updatedUsers);\n\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Poly').then(console.table);","// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        let id = transaction.id;\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                const output = { id: transaction.id, time: delay }\n                resolve(output);\n            } else {\n                reject(Error(transaction.id));\n            }\n        }, delay);\n    });\n        \n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\nimport './js-files/color-switcher'\nimport './js-files/timer'\nimport './js-files/delay-fn'\nimport './js-files/user-state-fn'\nimport './js-files/transaction'\n\n\n\n\n\n\n\n\n\n"]}